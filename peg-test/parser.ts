/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* program := mexpression
* SPACE := '\s+'
* SEPARATOR := ';'
* numerical := numerical={'(-)?[0-9]+(\.[0-9]+)?' | 'same'}
* text   := {'text' SPACE}?  text={'"[^"]*"'}
* time   := 'time' SPACE minutes=numerical seconds={ {SPACE|':'} seconds=numerical}?
* state  := 'state' SPACE state={ 'on' | 'off' | 'reset' | text }
* flow   := 'flow' SPACE flow={ 'start' | 'stop' | 'next' | 'prev' | 'activate' }
* media  := 'media' SPACE folder=folder SPACE page=numerical
* folder := 'folder' SPACE folder=text
* scale := 'scale' SPACE scale=numerical
* rotation := 'rotation' SPACE yaw=numerical SPACE pitch=numerical SPACE roll=numerical
* position := 'position' SPACE position={
*     position={position=xyz params=position_op*} |
*     position={param=position_param params=position_op*}
*     }
* xyz := x=numerical SPACE y=numerical SPACE z=numerical
* position_op := SPACE param=position_param
* position_param := rotation={rotation} |
*     channel={channel} |
*     plane={plane} |
*     relative={position} |
*     filter={filter}
* channel := 'channel' SPACE channel={text | numerical}
* plane := 'plane' SPACE plane={text | numerical}
* filter := 'filter' SPACE filter=fexpression
* fex := 'self' | 'all' | 'lost' | 'all' |
*     in    ={'in'    SPACE channel=channel} |
*     on    ={'on'    SPACE plane=plane} |
*     near  ={'near'  SPACE position=position distance={SPACE distance=distance}?} |
*     near  ={'near'  SPACE filter=fexpression distance={SPACE distance=distance}?} |
*     first ={'first' SPACE filter=fexpression count={SPACE count=count}?} |
*     last  ={'last'  SPACE filter=fexpression count={SPACE count=count}?} |
*     artifacts={'artifacts' SPACE artifact={artifact=text} {SPACE filter=fexpression}?} |
*     avatars={'avatars' SPACE filter=fexpression} |
*     property={'with' SPACE 'property' SPACE name=text SPACE property_op SPACE value=mexpression}
* distance := 'distance' SPACE count=numerical
* count := 'count' SPACE count=numerical
* fexpression := 
*     fex=fexpression SPACE op=fex_binary_op |
*     fex=fex_unary_op |
*     '\(' SPACE? fex=fexpression SPACE? '\)' |
*     fex
* fex_binary_op := op={'or'|'and'} SPACE fex=fexpression
* fex_unary_op :=  op={'not'} SPACE fex=fexpression
* property_op := op={'is'|'is not'|'not is'|'='|'<'|'<='|'>'|'>='|'<>'|'!='}
* artifact := 'artifact' SPACE artifact=text properties={SPACE property=property}*
* property := 'property' SPACE name=text value={ SPACE value=mexpression }?
* send := 'send' delay={SPACE 'delay' SPACE minutes=numerical seconds={ {SPACE|':'} seconds=numerical}?}? SPACE message=mexpression filter={ SPACE 'to' SPACE filter=filter}?
* cycle := condition={{'while' SPACE  filter=filter} | {'repeat' SPACE times=numerical}} SPACE send=send
* cycle_break := 'break'
* listen := 'listen' SPACE listen=lexpression SPACE 'do' SPACE do=mexpression 
* mexpression := 
*     message=mexpression SPACE? op=message_op |
*     '\(' SPACE? message=mexpression SPACE '\)' |
*     message
* lexpression := 
*     message=lexpression SPACE op=listen_op |
*     '\(' SPACE? message=lexpression SPACE '\)' |
*     message
* message_op := SEPARATOR SPACE message=mexpression
* listen_op  := op={'or'|'and'} SPACE message=lexpression
* message := numerical | text | time |
*            state | flow | 
*            media | folder | 
*            time |
*            position | rotation | scale | channel | plane |
*            filter | fex | fexpression |
*            artifact | property |
*            send | cycle | cycle_break | listen
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    program = "program",
    SPACE = "SPACE",
    SEPARATOR = "SEPARATOR",
    numerical = "numerical",
    numerical_$0_1 = "numerical_$0_1",
    numerical_$0_2 = "numerical_$0_2",
    text = "text",
    text_$0 = "text_$0",
    text_$1 = "text_$1",
    time = "time",
    time_$0 = "time_$0",
    time_$0_$0_1 = "time_$0_$0_1",
    time_$0_$0_2 = "time_$0_$0_2",
    state = "state",
    state_$0_1 = "state_$0_1",
    state_$0_2 = "state_$0_2",
    state_$0_3 = "state_$0_3",
    state_$0_4 = "state_$0_4",
    flow = "flow",
    flow_$0_1 = "flow_$0_1",
    flow_$0_2 = "flow_$0_2",
    flow_$0_3 = "flow_$0_3",
    flow_$0_4 = "flow_$0_4",
    flow_$0_5 = "flow_$0_5",
    media = "media",
    folder = "folder",
    scale = "scale",
    rotation = "rotation",
    position = "position",
    position_$0_1 = "position_$0_1",
    position_$0_2 = "position_$0_2",
    position_$0_$0 = "position_$0_$0",
    position_$0_$1 = "position_$0_$1",
    xyz = "xyz",
    position_op = "position_op",
    position_param_1 = "position_param_1",
    position_param_2 = "position_param_2",
    position_param_3 = "position_param_3",
    position_param_4 = "position_param_4",
    position_param_5 = "position_param_5",
    position_param_$0 = "position_param_$0",
    position_param_$1 = "position_param_$1",
    position_param_$2 = "position_param_$2",
    position_param_$3 = "position_param_$3",
    position_param_$4 = "position_param_$4",
    channel = "channel",
    channel_$0_1 = "channel_$0_1",
    channel_$0_2 = "channel_$0_2",
    plane = "plane",
    plane_$0_1 = "plane_$0_1",
    plane_$0_2 = "plane_$0_2",
    filter = "filter",
    fex_1 = "fex_1",
    fex_2 = "fex_2",
    fex_3 = "fex_3",
    fex_4 = "fex_4",
    fex_5 = "fex_5",
    fex_6 = "fex_6",
    fex_7 = "fex_7",
    fex_8 = "fex_8",
    fex_9 = "fex_9",
    fex_10 = "fex_10",
    fex_11 = "fex_11",
    fex_12 = "fex_12",
    fex_13 = "fex_13",
    fex_$0 = "fex_$0",
    fex_$1 = "fex_$1",
    fex_$2 = "fex_$2",
    fex_$2_$0 = "fex_$2_$0",
    fex_$3 = "fex_$3",
    fex_$3_$0 = "fex_$3_$0",
    fex_$4 = "fex_$4",
    fex_$4_$0 = "fex_$4_$0",
    fex_$5 = "fex_$5",
    fex_$5_$0 = "fex_$5_$0",
    fex_$6 = "fex_$6",
    fex_$6_$0 = "fex_$6_$0",
    fex_$6_$1 = "fex_$6_$1",
    fex_$7 = "fex_$7",
    fex_$8 = "fex_$8",
    distance = "distance",
    count = "count",
    fexpression_1 = "fexpression_1",
    fexpression_2 = "fexpression_2",
    fexpression_3 = "fexpression_3",
    fexpression_4 = "fexpression_4",
    fex_binary_op = "fex_binary_op",
    fex_binary_op_$0_1 = "fex_binary_op_$0_1",
    fex_binary_op_$0_2 = "fex_binary_op_$0_2",
    fex_unary_op = "fex_unary_op",
    fex_unary_op_$0 = "fex_unary_op_$0",
    property_op = "property_op",
    property_op_$0_1 = "property_op_$0_1",
    property_op_$0_2 = "property_op_$0_2",
    property_op_$0_3 = "property_op_$0_3",
    property_op_$0_4 = "property_op_$0_4",
    property_op_$0_5 = "property_op_$0_5",
    property_op_$0_6 = "property_op_$0_6",
    property_op_$0_7 = "property_op_$0_7",
    property_op_$0_8 = "property_op_$0_8",
    property_op_$0_9 = "property_op_$0_9",
    property_op_$0_10 = "property_op_$0_10",
    artifact = "artifact",
    artifact_$0 = "artifact_$0",
    property = "property",
    property_$0 = "property_$0",
    send = "send",
    send_$0 = "send_$0",
    send_$0_$0 = "send_$0_$0",
    send_$0_$0_$0_1 = "send_$0_$0_$0_1",
    send_$0_$0_$0_2 = "send_$0_$0_$0_2",
    send_$1 = "send_$1",
    cycle = "cycle",
    cycle_$0_1 = "cycle_$0_1",
    cycle_$0_2 = "cycle_$0_2",
    cycle_$0_$0 = "cycle_$0_$0",
    cycle_$0_$1 = "cycle_$0_$1",
    cycle_break = "cycle_break",
    listen = "listen",
    mexpression_1 = "mexpression_1",
    mexpression_2 = "mexpression_2",
    mexpression_3 = "mexpression_3",
    lexpression_1 = "lexpression_1",
    lexpression_2 = "lexpression_2",
    lexpression_3 = "lexpression_3",
    message_op = "message_op",
    listen_op = "listen_op",
    listen_op_$0_1 = "listen_op_$0_1",
    listen_op_$0_2 = "listen_op_$0_2",
    message_1 = "message_1",
    message_2 = "message_2",
    message_3 = "message_3",
    message_4 = "message_4",
    message_5 = "message_5",
    message_6 = "message_6",
    message_7 = "message_7",
    message_8 = "message_8",
    message_9 = "message_9",
    message_10 = "message_10",
    message_11 = "message_11",
    message_12 = "message_12",
    message_13 = "message_13",
    message_14 = "message_14",
    message_15 = "message_15",
    message_16 = "message_16",
    message_17 = "message_17",
    message_18 = "message_18",
    message_19 = "message_19",
    message_20 = "message_20",
    message_21 = "message_21",
    message_22 = "message_22",
}
export type program = mexpression;
export type SPACE = string;
export type SEPARATOR = string;
export interface numerical {
    kind: ASTKinds.numerical;
    numerical: numerical_$0;
}
export type numerical_$0 = numerical_$0_1 | numerical_$0_2;
export type numerical_$0_1 = string;
export type numerical_$0_2 = string;
export interface text {
    kind: ASTKinds.text;
    text: text_$1;
}
export interface text_$0 {
    kind: ASTKinds.text_$0;
}
export type text_$1 = string;
export interface time {
    kind: ASTKinds.time;
    minutes: numerical;
    seconds: Nullable<time_$0>;
}
export interface time_$0 {
    kind: ASTKinds.time_$0;
    seconds: numerical;
}
export type time_$0_$0 = time_$0_$0_1 | time_$0_$0_2;
export type time_$0_$0_1 = SPACE;
export type time_$0_$0_2 = string;
export interface state {
    kind: ASTKinds.state;
    state: state_$0;
}
export type state_$0 = state_$0_1 | state_$0_2 | state_$0_3 | state_$0_4;
export type state_$0_1 = string;
export type state_$0_2 = string;
export type state_$0_3 = string;
export type state_$0_4 = text;
export interface flow {
    kind: ASTKinds.flow;
    flow: flow_$0;
}
export type flow_$0 = flow_$0_1 | flow_$0_2 | flow_$0_3 | flow_$0_4 | flow_$0_5;
export type flow_$0_1 = string;
export type flow_$0_2 = string;
export type flow_$0_3 = string;
export type flow_$0_4 = string;
export type flow_$0_5 = string;
export interface media {
    kind: ASTKinds.media;
    folder: folder;
    page: numerical;
}
export interface folder {
    kind: ASTKinds.folder;
    folder: text;
}
export interface scale {
    kind: ASTKinds.scale;
    scale: numerical;
}
export interface rotation {
    kind: ASTKinds.rotation;
    yaw: numerical;
    pitch: numerical;
    roll: numerical;
}
export interface position {
    kind: ASTKinds.position;
    position: position_$0;
}
export type position_$0 = position_$0_1 | position_$0_2;
export interface position_$0_1 {
    kind: ASTKinds.position_$0_1;
    position: position_$0_$0;
}
export interface position_$0_2 {
    kind: ASTKinds.position_$0_2;
    position: position_$0_$1;
}
export interface position_$0_$0 {
    kind: ASTKinds.position_$0_$0;
    position: xyz;
    params: position_op[];
}
export interface position_$0_$1 {
    kind: ASTKinds.position_$0_$1;
    param: position_param;
    params: position_op[];
}
export interface xyz {
    kind: ASTKinds.xyz;
    x: numerical;
    y: numerical;
    z: numerical;
}
export interface position_op {
    kind: ASTKinds.position_op;
    param: position_param;
}
export type position_param = position_param_1 | position_param_2 | position_param_3 | position_param_4 | position_param_5;
export interface position_param_1 {
    kind: ASTKinds.position_param_1;
    rotation: position_param_$0;
}
export interface position_param_2 {
    kind: ASTKinds.position_param_2;
    channel: position_param_$1;
}
export interface position_param_3 {
    kind: ASTKinds.position_param_3;
    plane: position_param_$2;
}
export interface position_param_4 {
    kind: ASTKinds.position_param_4;
    relative: position_param_$3;
}
export interface position_param_5 {
    kind: ASTKinds.position_param_5;
    filter: position_param_$4;
}
export type position_param_$0 = rotation;
export type position_param_$1 = channel;
export type position_param_$2 = plane;
export type position_param_$3 = position;
export type position_param_$4 = filter;
export interface channel {
    kind: ASTKinds.channel;
    channel: channel_$0;
}
export type channel_$0 = channel_$0_1 | channel_$0_2;
export type channel_$0_1 = text;
export type channel_$0_2 = numerical;
export interface plane {
    kind: ASTKinds.plane;
    plane: plane_$0;
}
export type plane_$0 = plane_$0_1 | plane_$0_2;
export type plane_$0_1 = text;
export type plane_$0_2 = numerical;
export interface filter {
    kind: ASTKinds.filter;
    filter: fexpression;
}
export type fex = fex_1 | fex_2 | fex_3 | fex_4 | fex_5 | fex_6 | fex_7 | fex_8 | fex_9 | fex_10 | fex_11 | fex_12 | fex_13;
export type fex_1 = string;
export type fex_2 = string;
export type fex_3 = string;
export type fex_4 = string;
export interface fex_5 {
    kind: ASTKinds.fex_5;
    in: fex_$0;
}
export interface fex_6 {
    kind: ASTKinds.fex_6;
    on: fex_$1;
}
export interface fex_7 {
    kind: ASTKinds.fex_7;
    near: fex_$2;
}
export interface fex_8 {
    kind: ASTKinds.fex_8;
    near: fex_$3;
}
export interface fex_9 {
    kind: ASTKinds.fex_9;
    first: fex_$4;
}
export interface fex_10 {
    kind: ASTKinds.fex_10;
    last: fex_$5;
}
export interface fex_11 {
    kind: ASTKinds.fex_11;
    artifacts: fex_$6;
}
export interface fex_12 {
    kind: ASTKinds.fex_12;
    avatars: fex_$7;
}
export interface fex_13 {
    kind: ASTKinds.fex_13;
    property: fex_$8;
}
export interface fex_$0 {
    kind: ASTKinds.fex_$0;
    channel: channel;
}
export interface fex_$1 {
    kind: ASTKinds.fex_$1;
    plane: plane;
}
export interface fex_$2 {
    kind: ASTKinds.fex_$2;
    position: position;
    distance: Nullable<fex_$2_$0>;
}
export interface fex_$2_$0 {
    kind: ASTKinds.fex_$2_$0;
    distance: distance;
}
export interface fex_$3 {
    kind: ASTKinds.fex_$3;
    filter: fexpression;
    distance: Nullable<fex_$3_$0>;
}
export interface fex_$3_$0 {
    kind: ASTKinds.fex_$3_$0;
    distance: distance;
}
export interface fex_$4 {
    kind: ASTKinds.fex_$4;
    filter: fexpression;
    count: Nullable<fex_$4_$0>;
}
export interface fex_$4_$0 {
    kind: ASTKinds.fex_$4_$0;
    count: count;
}
export interface fex_$5 {
    kind: ASTKinds.fex_$5;
    filter: fexpression;
    count: Nullable<fex_$5_$0>;
}
export interface fex_$5_$0 {
    kind: ASTKinds.fex_$5_$0;
    count: count;
}
export interface fex_$6 {
    kind: ASTKinds.fex_$6;
    artifact: fex_$6_$0;
}
export interface fex_$6_$0 {
    kind: ASTKinds.fex_$6_$0;
    artifact: text;
}
export interface fex_$6_$1 {
    kind: ASTKinds.fex_$6_$1;
    filter: fexpression;
}
export interface fex_$7 {
    kind: ASTKinds.fex_$7;
    filter: fexpression;
}
export interface fex_$8 {
    kind: ASTKinds.fex_$8;
    name: text;
    value: mexpression;
}
export interface distance {
    kind: ASTKinds.distance;
    count: numerical;
}
export interface count {
    kind: ASTKinds.count;
    count: numerical;
}
export type fexpression = fexpression_1 | fexpression_2 | fexpression_3 | fexpression_4;
export interface fexpression_1 {
    kind: ASTKinds.fexpression_1;
    fex: fexpression;
    op: fex_binary_op;
}
export interface fexpression_2 {
    kind: ASTKinds.fexpression_2;
    fex: fex_unary_op;
}
export interface fexpression_3 {
    kind: ASTKinds.fexpression_3;
    fex: fexpression;
}
export type fexpression_4 = fex;
export interface fex_binary_op {
    kind: ASTKinds.fex_binary_op;
    op: fex_binary_op_$0;
    fex: fexpression;
}
export type fex_binary_op_$0 = fex_binary_op_$0_1 | fex_binary_op_$0_2;
export type fex_binary_op_$0_1 = string;
export type fex_binary_op_$0_2 = string;
export interface fex_unary_op {
    kind: ASTKinds.fex_unary_op;
    op: fex_unary_op_$0;
    fex: fexpression;
}
export type fex_unary_op_$0 = string;
export interface property_op {
    kind: ASTKinds.property_op;
    op: property_op_$0;
}
export type property_op_$0 = property_op_$0_1 | property_op_$0_2 | property_op_$0_3 | property_op_$0_4 | property_op_$0_5 | property_op_$0_6 | property_op_$0_7 | property_op_$0_8 | property_op_$0_9 | property_op_$0_10;
export type property_op_$0_1 = string;
export type property_op_$0_2 = string;
export type property_op_$0_3 = string;
export type property_op_$0_4 = string;
export type property_op_$0_5 = string;
export type property_op_$0_6 = string;
export type property_op_$0_7 = string;
export type property_op_$0_8 = string;
export type property_op_$0_9 = string;
export type property_op_$0_10 = string;
export interface artifact {
    kind: ASTKinds.artifact;
    artifact: text;
    properties: artifact_$0[];
}
export interface artifact_$0 {
    kind: ASTKinds.artifact_$0;
    property: property;
}
export interface property {
    kind: ASTKinds.property;
    name: text;
    value: Nullable<property_$0>;
}
export interface property_$0 {
    kind: ASTKinds.property_$0;
    value: mexpression;
}
export interface send {
    kind: ASTKinds.send;
    delay: Nullable<send_$0>;
    message: mexpression;
    filter: Nullable<send_$1>;
}
export interface send_$0 {
    kind: ASTKinds.send_$0;
    minutes: numerical;
    seconds: Nullable<send_$0_$0>;
}
export interface send_$0_$0 {
    kind: ASTKinds.send_$0_$0;
    seconds: numerical;
}
export type send_$0_$0_$0 = send_$0_$0_$0_1 | send_$0_$0_$0_2;
export type send_$0_$0_$0_1 = SPACE;
export type send_$0_$0_$0_2 = string;
export interface send_$1 {
    kind: ASTKinds.send_$1;
    filter: filter;
}
export interface cycle {
    kind: ASTKinds.cycle;
    condition: cycle_$0;
    send: send;
}
export type cycle_$0 = cycle_$0_1 | cycle_$0_2;
export type cycle_$0_1 = cycle_$0_$0;
export type cycle_$0_2 = cycle_$0_$1;
export interface cycle_$0_$0 {
    kind: ASTKinds.cycle_$0_$0;
    filter: filter;
}
export interface cycle_$0_$1 {
    kind: ASTKinds.cycle_$0_$1;
    times: numerical;
}
export type cycle_break = string;
export interface listen {
    kind: ASTKinds.listen;
    listen: lexpression;
    do: mexpression;
}
export type mexpression = mexpression_1 | mexpression_2 | mexpression_3;
export interface mexpression_1 {
    kind: ASTKinds.mexpression_1;
    message: mexpression;
    op: message_op;
}
export interface mexpression_2 {
    kind: ASTKinds.mexpression_2;
    message: mexpression;
}
export type mexpression_3 = message;
export type lexpression = lexpression_1 | lexpression_2 | lexpression_3;
export interface lexpression_1 {
    kind: ASTKinds.lexpression_1;
    message: lexpression;
    op: listen_op;
}
export interface lexpression_2 {
    kind: ASTKinds.lexpression_2;
    message: lexpression;
}
export type lexpression_3 = message;
export interface message_op {
    kind: ASTKinds.message_op;
    message: mexpression;
}
export interface listen_op {
    kind: ASTKinds.listen_op;
    op: listen_op_$0;
    message: lexpression;
}
export type listen_op_$0 = listen_op_$0_1 | listen_op_$0_2;
export type listen_op_$0_1 = string;
export type listen_op_$0_2 = string;
export type message = message_1 | message_2 | message_3 | message_4 | message_5 | message_6 | message_7 | message_8 | message_9 | message_10 | message_11 | message_12 | message_13 | message_14 | message_15 | message_16 | message_17 | message_18 | message_19 | message_20 | message_21 | message_22;
export type message_1 = numerical;
export type message_2 = text;
export type message_3 = time;
export type message_4 = state;
export type message_5 = flow;
export type message_6 = media;
export type message_7 = folder;
export type message_8 = time;
export type message_9 = position;
export type message_10 = rotation;
export type message_11 = scale;
export type message_12 = channel;
export type message_13 = plane;
export type message_14 = filter;
export type message_15 = fex;
export type message_16 = fexpression;
export type message_17 = artifact;
export type message_18 = property;
export type message_19 = send;
export type message_20 = cycle;
export type message_21 = cycle_break;
export type message_22 = listen;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$fexpression$memo.clear();
        this.$scope$mexpression$memo.clear();
        this.$scope$lexpression$memo.clear();
    }
    protected $scope$fexpression$memo: Map<number, [Nullable<fexpression>, PosInfo]> = new Map();
    protected $scope$mexpression$memo: Map<number, [Nullable<mexpression>, PosInfo]> = new Map();
    protected $scope$lexpression$memo: Map<number, [Nullable<lexpression>, PosInfo]> = new Map();
    public matchprogram($$dpth: number, $$cr?: ErrorTracker): Nullable<program> {
        return this.matchmexpression($$dpth + 1, $$cr);
    }
    public matchSPACE($$dpth: number, $$cr?: ErrorTracker): Nullable<SPACE> {
        return this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr);
    }
    public matchSEPARATOR($$dpth: number, $$cr?: ErrorTracker): Nullable<SEPARATOR> {
        return this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr);
    }
    public matchnumerical($$dpth: number, $$cr?: ErrorTracker): Nullable<numerical> {
        return this.run<numerical>($$dpth,
            () => {
                let $scope$numerical: Nullable<numerical_$0>;
                let $$res: Nullable<numerical> = null;
                if (true
                    && ($scope$numerical = this.matchnumerical_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.numerical, numerical: $scope$numerical};
                }
                return $$res;
            });
    }
    public matchnumerical_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<numerical_$0> {
        return this.choice<numerical_$0>([
            () => this.matchnumerical_$0_1($$dpth + 1, $$cr),
            () => this.matchnumerical_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchnumerical_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<numerical_$0_1> {
        return this.regexAccept(String.raw`(?:(-)?[0-9]+(\.[0-9]+)?)`, $$dpth + 1, $$cr);
    }
    public matchnumerical_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<numerical_$0_2> {
        return this.regexAccept(String.raw`(?:same)`, $$dpth + 1, $$cr);
    }
    public matchtext($$dpth: number, $$cr?: ErrorTracker): Nullable<text> {
        return this.run<text>($$dpth,
            () => {
                let $scope$text: Nullable<text_$1>;
                let $$res: Nullable<text> = null;
                if (true
                    && ((this.matchtext_$0($$dpth + 1, $$cr)) || true)
                    && ($scope$text = this.matchtext_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.text, text: $scope$text};
                }
                return $$res;
            });
    }
    public matchtext_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<text_$0> {
        return this.run<text_$0>($$dpth,
            () => {
                let $$res: Nullable<text_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.text_$0, };
                }
                return $$res;
            });
    }
    public matchtext_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<text_$1> {
        return this.regexAccept(String.raw`(?:"[^"]*")`, $$dpth + 1, $$cr);
    }
    public matchtime($$dpth: number, $$cr?: ErrorTracker): Nullable<time> {
        return this.run<time>($$dpth,
            () => {
                let $scope$minutes: Nullable<numerical>;
                let $scope$seconds: Nullable<Nullable<time_$0>>;
                let $$res: Nullable<time> = null;
                if (true
                    && this.regexAccept(String.raw`(?:time)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$minutes = this.matchnumerical($$dpth + 1, $$cr)) !== null
                    && (($scope$seconds = this.matchtime_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.time, minutes: $scope$minutes, seconds: $scope$seconds};
                }
                return $$res;
            });
    }
    public matchtime_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<time_$0> {
        return this.run<time_$0>($$dpth,
            () => {
                let $scope$seconds: Nullable<numerical>;
                let $$res: Nullable<time_$0> = null;
                if (true
                    && this.matchtime_$0_$0($$dpth + 1, $$cr) !== null
                    && ($scope$seconds = this.matchnumerical($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.time_$0, seconds: $scope$seconds};
                }
                return $$res;
            });
    }
    public matchtime_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<time_$0_$0> {
        return this.choice<time_$0_$0>([
            () => this.matchtime_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchtime_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchtime_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<time_$0_$0_1> {
        return this.matchSPACE($$dpth + 1, $$cr);
    }
    public matchtime_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<time_$0_$0_2> {
        return this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr);
    }
    public matchstate($$dpth: number, $$cr?: ErrorTracker): Nullable<state> {
        return this.run<state>($$dpth,
            () => {
                let $scope$state: Nullable<state_$0>;
                let $$res: Nullable<state> = null;
                if (true
                    && this.regexAccept(String.raw`(?:state)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$state = this.matchstate_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.state, state: $scope$state};
                }
                return $$res;
            });
    }
    public matchstate_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<state_$0> {
        return this.choice<state_$0>([
            () => this.matchstate_$0_1($$dpth + 1, $$cr),
            () => this.matchstate_$0_2($$dpth + 1, $$cr),
            () => this.matchstate_$0_3($$dpth + 1, $$cr),
            () => this.matchstate_$0_4($$dpth + 1, $$cr),
        ]);
    }
    public matchstate_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<state_$0_1> {
        return this.regexAccept(String.raw`(?:on)`, $$dpth + 1, $$cr);
    }
    public matchstate_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<state_$0_2> {
        return this.regexAccept(String.raw`(?:off)`, $$dpth + 1, $$cr);
    }
    public matchstate_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<state_$0_3> {
        return this.regexAccept(String.raw`(?:reset)`, $$dpth + 1, $$cr);
    }
    public matchstate_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<state_$0_4> {
        return this.matchtext($$dpth + 1, $$cr);
    }
    public matchflow($$dpth: number, $$cr?: ErrorTracker): Nullable<flow> {
        return this.run<flow>($$dpth,
            () => {
                let $scope$flow: Nullable<flow_$0>;
                let $$res: Nullable<flow> = null;
                if (true
                    && this.regexAccept(String.raw`(?:flow)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$flow = this.matchflow_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.flow, flow: $scope$flow};
                }
                return $$res;
            });
    }
    public matchflow_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flow_$0> {
        return this.choice<flow_$0>([
            () => this.matchflow_$0_1($$dpth + 1, $$cr),
            () => this.matchflow_$0_2($$dpth + 1, $$cr),
            () => this.matchflow_$0_3($$dpth + 1, $$cr),
            () => this.matchflow_$0_4($$dpth + 1, $$cr),
            () => this.matchflow_$0_5($$dpth + 1, $$cr),
        ]);
    }
    public matchflow_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flow_$0_1> {
        return this.regexAccept(String.raw`(?:start)`, $$dpth + 1, $$cr);
    }
    public matchflow_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flow_$0_2> {
        return this.regexAccept(String.raw`(?:stop)`, $$dpth + 1, $$cr);
    }
    public matchflow_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flow_$0_3> {
        return this.regexAccept(String.raw`(?:next)`, $$dpth + 1, $$cr);
    }
    public matchflow_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<flow_$0_4> {
        return this.regexAccept(String.raw`(?:prev)`, $$dpth + 1, $$cr);
    }
    public matchflow_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<flow_$0_5> {
        return this.regexAccept(String.raw`(?:activate)`, $$dpth + 1, $$cr);
    }
    public matchmedia($$dpth: number, $$cr?: ErrorTracker): Nullable<media> {
        return this.run<media>($$dpth,
            () => {
                let $scope$folder: Nullable<folder>;
                let $scope$page: Nullable<numerical>;
                let $$res: Nullable<media> = null;
                if (true
                    && this.regexAccept(String.raw`(?:media)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$folder = this.matchfolder($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$page = this.matchnumerical($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.media, folder: $scope$folder, page: $scope$page};
                }
                return $$res;
            });
    }
    public matchfolder($$dpth: number, $$cr?: ErrorTracker): Nullable<folder> {
        return this.run<folder>($$dpth,
            () => {
                let $scope$folder: Nullable<text>;
                let $$res: Nullable<folder> = null;
                if (true
                    && this.regexAccept(String.raw`(?:folder)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$folder = this.matchtext($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.folder, folder: $scope$folder};
                }
                return $$res;
            });
    }
    public matchscale($$dpth: number, $$cr?: ErrorTracker): Nullable<scale> {
        return this.run<scale>($$dpth,
            () => {
                let $scope$scale: Nullable<numerical>;
                let $$res: Nullable<scale> = null;
                if (true
                    && this.regexAccept(String.raw`(?:scale)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$scale = this.matchnumerical($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.scale, scale: $scope$scale};
                }
                return $$res;
            });
    }
    public matchrotation($$dpth: number, $$cr?: ErrorTracker): Nullable<rotation> {
        return this.run<rotation>($$dpth,
            () => {
                let $scope$yaw: Nullable<numerical>;
                let $scope$pitch: Nullable<numerical>;
                let $scope$roll: Nullable<numerical>;
                let $$res: Nullable<rotation> = null;
                if (true
                    && this.regexAccept(String.raw`(?:rotation)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$yaw = this.matchnumerical($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$pitch = this.matchnumerical($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$roll = this.matchnumerical($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.rotation, yaw: $scope$yaw, pitch: $scope$pitch, roll: $scope$roll};
                }
                return $$res;
            });
    }
    public matchposition($$dpth: number, $$cr?: ErrorTracker): Nullable<position> {
        return this.run<position>($$dpth,
            () => {
                let $scope$position: Nullable<position_$0>;
                let $$res: Nullable<position> = null;
                if (true
                    && this.regexAccept(String.raw`(?:position)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$position = this.matchposition_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.position, position: $scope$position};
                }
                return $$res;
            });
    }
    public matchposition_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<position_$0> {
        return this.choice<position_$0>([
            () => this.matchposition_$0_1($$dpth + 1, $$cr),
            () => this.matchposition_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchposition_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<position_$0_1> {
        return this.run<position_$0_1>($$dpth,
            () => {
                let $scope$position: Nullable<position_$0_$0>;
                let $$res: Nullable<position_$0_1> = null;
                if (true
                    && ($scope$position = this.matchposition_$0_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.position_$0_1, position: $scope$position};
                }
                return $$res;
            });
    }
    public matchposition_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<position_$0_2> {
        return this.run<position_$0_2>($$dpth,
            () => {
                let $scope$position: Nullable<position_$0_$1>;
                let $$res: Nullable<position_$0_2> = null;
                if (true
                    && ($scope$position = this.matchposition_$0_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.position_$0_2, position: $scope$position};
                }
                return $$res;
            });
    }
    public matchposition_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<position_$0_$0> {
        return this.run<position_$0_$0>($$dpth,
            () => {
                let $scope$position: Nullable<xyz>;
                let $scope$params: Nullable<position_op[]>;
                let $$res: Nullable<position_$0_$0> = null;
                if (true
                    && ($scope$position = this.matchxyz($$dpth + 1, $$cr)) !== null
                    && ($scope$params = this.loop<position_op>(() => this.matchposition_op($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.position_$0_$0, position: $scope$position, params: $scope$params};
                }
                return $$res;
            });
    }
    public matchposition_$0_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<position_$0_$1> {
        return this.run<position_$0_$1>($$dpth,
            () => {
                let $scope$param: Nullable<position_param>;
                let $scope$params: Nullable<position_op[]>;
                let $$res: Nullable<position_$0_$1> = null;
                if (true
                    && ($scope$param = this.matchposition_param($$dpth + 1, $$cr)) !== null
                    && ($scope$params = this.loop<position_op>(() => this.matchposition_op($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.position_$0_$1, param: $scope$param, params: $scope$params};
                }
                return $$res;
            });
    }
    public matchxyz($$dpth: number, $$cr?: ErrorTracker): Nullable<xyz> {
        return this.run<xyz>($$dpth,
            () => {
                let $scope$x: Nullable<numerical>;
                let $scope$y: Nullable<numerical>;
                let $scope$z: Nullable<numerical>;
                let $$res: Nullable<xyz> = null;
                if (true
                    && ($scope$x = this.matchnumerical($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$y = this.matchnumerical($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$z = this.matchnumerical($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.xyz, x: $scope$x, y: $scope$y, z: $scope$z};
                }
                return $$res;
            });
    }
    public matchposition_op($$dpth: number, $$cr?: ErrorTracker): Nullable<position_op> {
        return this.run<position_op>($$dpth,
            () => {
                let $scope$param: Nullable<position_param>;
                let $$res: Nullable<position_op> = null;
                if (true
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$param = this.matchposition_param($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.position_op, param: $scope$param};
                }
                return $$res;
            });
    }
    public matchposition_param($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param> {
        return this.choice<position_param>([
            () => this.matchposition_param_1($$dpth + 1, $$cr),
            () => this.matchposition_param_2($$dpth + 1, $$cr),
            () => this.matchposition_param_3($$dpth + 1, $$cr),
            () => this.matchposition_param_4($$dpth + 1, $$cr),
            () => this.matchposition_param_5($$dpth + 1, $$cr),
        ]);
    }
    public matchposition_param_1($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param_1> {
        return this.run<position_param_1>($$dpth,
            () => {
                let $scope$rotation: Nullable<position_param_$0>;
                let $$res: Nullable<position_param_1> = null;
                if (true
                    && ($scope$rotation = this.matchposition_param_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.position_param_1, rotation: $scope$rotation};
                }
                return $$res;
            });
    }
    public matchposition_param_2($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param_2> {
        return this.run<position_param_2>($$dpth,
            () => {
                let $scope$channel: Nullable<position_param_$1>;
                let $$res: Nullable<position_param_2> = null;
                if (true
                    && ($scope$channel = this.matchposition_param_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.position_param_2, channel: $scope$channel};
                }
                return $$res;
            });
    }
    public matchposition_param_3($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param_3> {
        return this.run<position_param_3>($$dpth,
            () => {
                let $scope$plane: Nullable<position_param_$2>;
                let $$res: Nullable<position_param_3> = null;
                if (true
                    && ($scope$plane = this.matchposition_param_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.position_param_3, plane: $scope$plane};
                }
                return $$res;
            });
    }
    public matchposition_param_4($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param_4> {
        return this.run<position_param_4>($$dpth,
            () => {
                let $scope$relative: Nullable<position_param_$3>;
                let $$res: Nullable<position_param_4> = null;
                if (true
                    && ($scope$relative = this.matchposition_param_$3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.position_param_4, relative: $scope$relative};
                }
                return $$res;
            });
    }
    public matchposition_param_5($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param_5> {
        return this.run<position_param_5>($$dpth,
            () => {
                let $scope$filter: Nullable<position_param_$4>;
                let $$res: Nullable<position_param_5> = null;
                if (true
                    && ($scope$filter = this.matchposition_param_$4($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.position_param_5, filter: $scope$filter};
                }
                return $$res;
            });
    }
    public matchposition_param_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param_$0> {
        return this.matchrotation($$dpth + 1, $$cr);
    }
    public matchposition_param_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param_$1> {
        return this.matchchannel($$dpth + 1, $$cr);
    }
    public matchposition_param_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param_$2> {
        return this.matchplane($$dpth + 1, $$cr);
    }
    public matchposition_param_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param_$3> {
        return this.matchposition($$dpth + 1, $$cr);
    }
    public matchposition_param_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<position_param_$4> {
        return this.matchfilter($$dpth + 1, $$cr);
    }
    public matchchannel($$dpth: number, $$cr?: ErrorTracker): Nullable<channel> {
        return this.run<channel>($$dpth,
            () => {
                let $scope$channel: Nullable<channel_$0>;
                let $$res: Nullable<channel> = null;
                if (true
                    && this.regexAccept(String.raw`(?:channel)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$channel = this.matchchannel_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.channel, channel: $scope$channel};
                }
                return $$res;
            });
    }
    public matchchannel_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<channel_$0> {
        return this.choice<channel_$0>([
            () => this.matchchannel_$0_1($$dpth + 1, $$cr),
            () => this.matchchannel_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchchannel_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<channel_$0_1> {
        return this.matchtext($$dpth + 1, $$cr);
    }
    public matchchannel_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<channel_$0_2> {
        return this.matchnumerical($$dpth + 1, $$cr);
    }
    public matchplane($$dpth: number, $$cr?: ErrorTracker): Nullable<plane> {
        return this.run<plane>($$dpth,
            () => {
                let $scope$plane: Nullable<plane_$0>;
                let $$res: Nullable<plane> = null;
                if (true
                    && this.regexAccept(String.raw`(?:plane)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$plane = this.matchplane_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.plane, plane: $scope$plane};
                }
                return $$res;
            });
    }
    public matchplane_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<plane_$0> {
        return this.choice<plane_$0>([
            () => this.matchplane_$0_1($$dpth + 1, $$cr),
            () => this.matchplane_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchplane_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<plane_$0_1> {
        return this.matchtext($$dpth + 1, $$cr);
    }
    public matchplane_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<plane_$0_2> {
        return this.matchnumerical($$dpth + 1, $$cr);
    }
    public matchfilter($$dpth: number, $$cr?: ErrorTracker): Nullable<filter> {
        return this.run<filter>($$dpth,
            () => {
                let $scope$filter: Nullable<fexpression>;
                let $$res: Nullable<filter> = null;
                if (true
                    && this.regexAccept(String.raw`(?:filter)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$filter = this.matchfexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.filter, filter: $scope$filter};
                }
                return $$res;
            });
    }
    public matchfex($$dpth: number, $$cr?: ErrorTracker): Nullable<fex> {
        return this.choice<fex>([
            () => this.matchfex_1($$dpth + 1, $$cr),
            () => this.matchfex_2($$dpth + 1, $$cr),
            () => this.matchfex_3($$dpth + 1, $$cr),
            () => this.matchfex_4($$dpth + 1, $$cr),
            () => this.matchfex_5($$dpth + 1, $$cr),
            () => this.matchfex_6($$dpth + 1, $$cr),
            () => this.matchfex_7($$dpth + 1, $$cr),
            () => this.matchfex_8($$dpth + 1, $$cr),
            () => this.matchfex_9($$dpth + 1, $$cr),
            () => this.matchfex_10($$dpth + 1, $$cr),
            () => this.matchfex_11($$dpth + 1, $$cr),
            () => this.matchfex_12($$dpth + 1, $$cr),
            () => this.matchfex_13($$dpth + 1, $$cr),
        ]);
    }
    public matchfex_1($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_1> {
        return this.regexAccept(String.raw`(?:self)`, $$dpth + 1, $$cr);
    }
    public matchfex_2($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_2> {
        return this.regexAccept(String.raw`(?:all)`, $$dpth + 1, $$cr);
    }
    public matchfex_3($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_3> {
        return this.regexAccept(String.raw`(?:lost)`, $$dpth + 1, $$cr);
    }
    public matchfex_4($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_4> {
        return this.regexAccept(String.raw`(?:all)`, $$dpth + 1, $$cr);
    }
    public matchfex_5($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_5> {
        return this.run<fex_5>($$dpth,
            () => {
                let $scope$in: Nullable<fex_$0>;
                let $$res: Nullable<fex_5> = null;
                if (true
                    && ($scope$in = this.matchfex_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_5, in: $scope$in};
                }
                return $$res;
            });
    }
    public matchfex_6($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_6> {
        return this.run<fex_6>($$dpth,
            () => {
                let $scope$on: Nullable<fex_$1>;
                let $$res: Nullable<fex_6> = null;
                if (true
                    && ($scope$on = this.matchfex_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_6, on: $scope$on};
                }
                return $$res;
            });
    }
    public matchfex_7($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_7> {
        return this.run<fex_7>($$dpth,
            () => {
                let $scope$near: Nullable<fex_$2>;
                let $$res: Nullable<fex_7> = null;
                if (true
                    && ($scope$near = this.matchfex_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_7, near: $scope$near};
                }
                return $$res;
            });
    }
    public matchfex_8($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_8> {
        return this.run<fex_8>($$dpth,
            () => {
                let $scope$near: Nullable<fex_$3>;
                let $$res: Nullable<fex_8> = null;
                if (true
                    && ($scope$near = this.matchfex_$3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_8, near: $scope$near};
                }
                return $$res;
            });
    }
    public matchfex_9($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_9> {
        return this.run<fex_9>($$dpth,
            () => {
                let $scope$first: Nullable<fex_$4>;
                let $$res: Nullable<fex_9> = null;
                if (true
                    && ($scope$first = this.matchfex_$4($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_9, first: $scope$first};
                }
                return $$res;
            });
    }
    public matchfex_10($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_10> {
        return this.run<fex_10>($$dpth,
            () => {
                let $scope$last: Nullable<fex_$5>;
                let $$res: Nullable<fex_10> = null;
                if (true
                    && ($scope$last = this.matchfex_$5($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_10, last: $scope$last};
                }
                return $$res;
            });
    }
    public matchfex_11($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_11> {
        return this.run<fex_11>($$dpth,
            () => {
                let $scope$artifacts: Nullable<fex_$6>;
                let $$res: Nullable<fex_11> = null;
                if (true
                    && ($scope$artifacts = this.matchfex_$6($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_11, artifacts: $scope$artifacts};
                }
                return $$res;
            });
    }
    public matchfex_12($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_12> {
        return this.run<fex_12>($$dpth,
            () => {
                let $scope$avatars: Nullable<fex_$7>;
                let $$res: Nullable<fex_12> = null;
                if (true
                    && ($scope$avatars = this.matchfex_$7($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_12, avatars: $scope$avatars};
                }
                return $$res;
            });
    }
    public matchfex_13($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_13> {
        return this.run<fex_13>($$dpth,
            () => {
                let $scope$property: Nullable<fex_$8>;
                let $$res: Nullable<fex_13> = null;
                if (true
                    && ($scope$property = this.matchfex_$8($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_13, property: $scope$property};
                }
                return $$res;
            });
    }
    public matchfex_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$0> {
        return this.run<fex_$0>($$dpth,
            () => {
                let $scope$channel: Nullable<channel>;
                let $$res: Nullable<fex_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:in)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$channel = this.matchchannel($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_$0, channel: $scope$channel};
                }
                return $$res;
            });
    }
    public matchfex_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$1> {
        return this.run<fex_$1>($$dpth,
            () => {
                let $scope$plane: Nullable<plane>;
                let $$res: Nullable<fex_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:on)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$plane = this.matchplane($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_$1, plane: $scope$plane};
                }
                return $$res;
            });
    }
    public matchfex_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$2> {
        return this.run<fex_$2>($$dpth,
            () => {
                let $scope$position: Nullable<position>;
                let $scope$distance: Nullable<Nullable<fex_$2_$0>>;
                let $$res: Nullable<fex_$2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:near)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$position = this.matchposition($$dpth + 1, $$cr)) !== null
                    && (($scope$distance = this.matchfex_$2_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.fex_$2, position: $scope$position, distance: $scope$distance};
                }
                return $$res;
            });
    }
    public matchfex_$2_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$2_$0> {
        return this.run<fex_$2_$0>($$dpth,
            () => {
                let $scope$distance: Nullable<distance>;
                let $$res: Nullable<fex_$2_$0> = null;
                if (true
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$distance = this.matchdistance($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_$2_$0, distance: $scope$distance};
                }
                return $$res;
            });
    }
    public matchfex_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$3> {
        return this.run<fex_$3>($$dpth,
            () => {
                let $scope$filter: Nullable<fexpression>;
                let $scope$distance: Nullable<Nullable<fex_$3_$0>>;
                let $$res: Nullable<fex_$3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:near)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$filter = this.matchfexpression($$dpth + 1, $$cr)) !== null
                    && (($scope$distance = this.matchfex_$3_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.fex_$3, filter: $scope$filter, distance: $scope$distance};
                }
                return $$res;
            });
    }
    public matchfex_$3_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$3_$0> {
        return this.run<fex_$3_$0>($$dpth,
            () => {
                let $scope$distance: Nullable<distance>;
                let $$res: Nullable<fex_$3_$0> = null;
                if (true
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$distance = this.matchdistance($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_$3_$0, distance: $scope$distance};
                }
                return $$res;
            });
    }
    public matchfex_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$4> {
        return this.run<fex_$4>($$dpth,
            () => {
                let $scope$filter: Nullable<fexpression>;
                let $scope$count: Nullable<Nullable<fex_$4_$0>>;
                let $$res: Nullable<fex_$4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:first)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$filter = this.matchfexpression($$dpth + 1, $$cr)) !== null
                    && (($scope$count = this.matchfex_$4_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.fex_$4, filter: $scope$filter, count: $scope$count};
                }
                return $$res;
            });
    }
    public matchfex_$4_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$4_$0> {
        return this.run<fex_$4_$0>($$dpth,
            () => {
                let $scope$count: Nullable<count>;
                let $$res: Nullable<fex_$4_$0> = null;
                if (true
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$count = this.matchcount($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_$4_$0, count: $scope$count};
                }
                return $$res;
            });
    }
    public matchfex_$5($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$5> {
        return this.run<fex_$5>($$dpth,
            () => {
                let $scope$filter: Nullable<fexpression>;
                let $scope$count: Nullable<Nullable<fex_$5_$0>>;
                let $$res: Nullable<fex_$5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:last)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$filter = this.matchfexpression($$dpth + 1, $$cr)) !== null
                    && (($scope$count = this.matchfex_$5_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.fex_$5, filter: $scope$filter, count: $scope$count};
                }
                return $$res;
            });
    }
    public matchfex_$5_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$5_$0> {
        return this.run<fex_$5_$0>($$dpth,
            () => {
                let $scope$count: Nullable<count>;
                let $$res: Nullable<fex_$5_$0> = null;
                if (true
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$count = this.matchcount($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_$5_$0, count: $scope$count};
                }
                return $$res;
            });
    }
    public matchfex_$6($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$6> {
        return this.run<fex_$6>($$dpth,
            () => {
                let $scope$artifact: Nullable<fex_$6_$0>;
                let $$res: Nullable<fex_$6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:artifacts)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$artifact = this.matchfex_$6_$0($$dpth + 1, $$cr)) !== null
                    && ((this.matchfex_$6_$1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.fex_$6, artifact: $scope$artifact};
                }
                return $$res;
            });
    }
    public matchfex_$6_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$6_$0> {
        return this.run<fex_$6_$0>($$dpth,
            () => {
                let $scope$artifact: Nullable<text>;
                let $$res: Nullable<fex_$6_$0> = null;
                if (true
                    && ($scope$artifact = this.matchtext($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_$6_$0, artifact: $scope$artifact};
                }
                return $$res;
            });
    }
    public matchfex_$6_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$6_$1> {
        return this.run<fex_$6_$1>($$dpth,
            () => {
                let $scope$filter: Nullable<fexpression>;
                let $$res: Nullable<fex_$6_$1> = null;
                if (true
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$filter = this.matchfexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_$6_$1, filter: $scope$filter};
                }
                return $$res;
            });
    }
    public matchfex_$7($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$7> {
        return this.run<fex_$7>($$dpth,
            () => {
                let $scope$filter: Nullable<fexpression>;
                let $$res: Nullable<fex_$7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:avatars)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$filter = this.matchfexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_$7, filter: $scope$filter};
                }
                return $$res;
            });
    }
    public matchfex_$8($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_$8> {
        return this.run<fex_$8>($$dpth,
            () => {
                let $scope$name: Nullable<text>;
                let $scope$value: Nullable<mexpression>;
                let $$res: Nullable<fex_$8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:with)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:property)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchtext($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && this.matchproperty_op($$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchmexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_$8, name: $scope$name, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchdistance($$dpth: number, $$cr?: ErrorTracker): Nullable<distance> {
        return this.run<distance>($$dpth,
            () => {
                let $scope$count: Nullable<numerical>;
                let $$res: Nullable<distance> = null;
                if (true
                    && this.regexAccept(String.raw`(?:distance)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$count = this.matchnumerical($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.distance, count: $scope$count};
                }
                return $$res;
            });
    }
    public matchcount($$dpth: number, $$cr?: ErrorTracker): Nullable<count> {
        return this.run<count>($$dpth,
            () => {
                let $scope$count: Nullable<numerical>;
                let $$res: Nullable<count> = null;
                if (true
                    && this.regexAccept(String.raw`(?:count)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$count = this.matchnumerical($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.count, count: $scope$count};
                }
                return $$res;
            });
    }
    public matchfexpression($$dpth: number, $$cr?: ErrorTracker): Nullable<fexpression> {
        const fn = () => {
            return this.choice<fexpression>([
                () => this.matchfexpression_1($$dpth + 1, $$cr),
                () => this.matchfexpression_2($$dpth + 1, $$cr),
                () => this.matchfexpression_3($$dpth + 1, $$cr),
                () => this.matchfexpression_4($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$fexpression$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$fexpression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<fexpression> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$fexpression$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchfexpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<fexpression_1> {
        return this.run<fexpression_1>($$dpth,
            () => {
                let $scope$fex: Nullable<fexpression>;
                let $scope$op: Nullable<fex_binary_op>;
                let $$res: Nullable<fexpression_1> = null;
                if (true
                    && ($scope$fex = this.matchfexpression($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$op = this.matchfex_binary_op($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fexpression_1, fex: $scope$fex, op: $scope$op};
                }
                return $$res;
            });
    }
    public matchfexpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<fexpression_2> {
        return this.run<fexpression_2>($$dpth,
            () => {
                let $scope$fex: Nullable<fex_unary_op>;
                let $$res: Nullable<fexpression_2> = null;
                if (true
                    && ($scope$fex = this.matchfex_unary_op($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fexpression_2, fex: $scope$fex};
                }
                return $$res;
            });
    }
    public matchfexpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<fexpression_3> {
        return this.run<fexpression_3>($$dpth,
            () => {
                let $scope$fex: Nullable<fexpression>;
                let $$res: Nullable<fexpression_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ((this.matchSPACE($$dpth + 1, $$cr)) || true)
                    && ($scope$fex = this.matchfexpression($$dpth + 1, $$cr)) !== null
                    && ((this.matchSPACE($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.fexpression_3, fex: $scope$fex};
                }
                return $$res;
            });
    }
    public matchfexpression_4($$dpth: number, $$cr?: ErrorTracker): Nullable<fexpression_4> {
        return this.matchfex($$dpth + 1, $$cr);
    }
    public matchfex_binary_op($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_binary_op> {
        return this.run<fex_binary_op>($$dpth,
            () => {
                let $scope$op: Nullable<fex_binary_op_$0>;
                let $scope$fex: Nullable<fexpression>;
                let $$res: Nullable<fex_binary_op> = null;
                if (true
                    && ($scope$op = this.matchfex_binary_op_$0($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$fex = this.matchfexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_binary_op, op: $scope$op, fex: $scope$fex};
                }
                return $$res;
            });
    }
    public matchfex_binary_op_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_binary_op_$0> {
        return this.choice<fex_binary_op_$0>([
            () => this.matchfex_binary_op_$0_1($$dpth + 1, $$cr),
            () => this.matchfex_binary_op_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchfex_binary_op_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_binary_op_$0_1> {
        return this.regexAccept(String.raw`(?:or)`, $$dpth + 1, $$cr);
    }
    public matchfex_binary_op_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_binary_op_$0_2> {
        return this.regexAccept(String.raw`(?:and)`, $$dpth + 1, $$cr);
    }
    public matchfex_unary_op($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_unary_op> {
        return this.run<fex_unary_op>($$dpth,
            () => {
                let $scope$op: Nullable<fex_unary_op_$0>;
                let $scope$fex: Nullable<fexpression>;
                let $$res: Nullable<fex_unary_op> = null;
                if (true
                    && ($scope$op = this.matchfex_unary_op_$0($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$fex = this.matchfexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fex_unary_op, op: $scope$op, fex: $scope$fex};
                }
                return $$res;
            });
    }
    public matchfex_unary_op_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fex_unary_op_$0> {
        return this.regexAccept(String.raw`(?:not)`, $$dpth + 1, $$cr);
    }
    public matchproperty_op($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op> {
        return this.run<property_op>($$dpth,
            () => {
                let $scope$op: Nullable<property_op_$0>;
                let $$res: Nullable<property_op> = null;
                if (true
                    && ($scope$op = this.matchproperty_op_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.property_op, op: $scope$op};
                }
                return $$res;
            });
    }
    public matchproperty_op_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0> {
        return this.choice<property_op_$0>([
            () => this.matchproperty_op_$0_1($$dpth + 1, $$cr),
            () => this.matchproperty_op_$0_2($$dpth + 1, $$cr),
            () => this.matchproperty_op_$0_3($$dpth + 1, $$cr),
            () => this.matchproperty_op_$0_4($$dpth + 1, $$cr),
            () => this.matchproperty_op_$0_5($$dpth + 1, $$cr),
            () => this.matchproperty_op_$0_6($$dpth + 1, $$cr),
            () => this.matchproperty_op_$0_7($$dpth + 1, $$cr),
            () => this.matchproperty_op_$0_8($$dpth + 1, $$cr),
            () => this.matchproperty_op_$0_9($$dpth + 1, $$cr),
            () => this.matchproperty_op_$0_10($$dpth + 1, $$cr),
        ]);
    }
    public matchproperty_op_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0_1> {
        return this.regexAccept(String.raw`(?:is)`, $$dpth + 1, $$cr);
    }
    public matchproperty_op_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0_2> {
        return this.regexAccept(String.raw`(?:is not)`, $$dpth + 1, $$cr);
    }
    public matchproperty_op_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0_3> {
        return this.regexAccept(String.raw`(?:not is)`, $$dpth + 1, $$cr);
    }
    public matchproperty_op_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0_4> {
        return this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr);
    }
    public matchproperty_op_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0_5> {
        return this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr);
    }
    public matchproperty_op_$0_6($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0_6> {
        return this.regexAccept(String.raw`(?:<=)`, $$dpth + 1, $$cr);
    }
    public matchproperty_op_$0_7($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0_7> {
        return this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr);
    }
    public matchproperty_op_$0_8($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0_8> {
        return this.regexAccept(String.raw`(?:>=)`, $$dpth + 1, $$cr);
    }
    public matchproperty_op_$0_9($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0_9> {
        return this.regexAccept(String.raw`(?:<>)`, $$dpth + 1, $$cr);
    }
    public matchproperty_op_$0_10($$dpth: number, $$cr?: ErrorTracker): Nullable<property_op_$0_10> {
        return this.regexAccept(String.raw`(?:!=)`, $$dpth + 1, $$cr);
    }
    public matchartifact($$dpth: number, $$cr?: ErrorTracker): Nullable<artifact> {
        return this.run<artifact>($$dpth,
            () => {
                let $scope$artifact: Nullable<text>;
                let $scope$properties: Nullable<artifact_$0[]>;
                let $$res: Nullable<artifact> = null;
                if (true
                    && this.regexAccept(String.raw`(?:artifact)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$artifact = this.matchtext($$dpth + 1, $$cr)) !== null
                    && ($scope$properties = this.loop<artifact_$0>(() => this.matchartifact_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.artifact, artifact: $scope$artifact, properties: $scope$properties};
                }
                return $$res;
            });
    }
    public matchartifact_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<artifact_$0> {
        return this.run<artifact_$0>($$dpth,
            () => {
                let $scope$property: Nullable<property>;
                let $$res: Nullable<artifact_$0> = null;
                if (true
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$property = this.matchproperty($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.artifact_$0, property: $scope$property};
                }
                return $$res;
            });
    }
    public matchproperty($$dpth: number, $$cr?: ErrorTracker): Nullable<property> {
        return this.run<property>($$dpth,
            () => {
                let $scope$name: Nullable<text>;
                let $scope$value: Nullable<Nullable<property_$0>>;
                let $$res: Nullable<property> = null;
                if (true
                    && this.regexAccept(String.raw`(?:property)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchtext($$dpth + 1, $$cr)) !== null
                    && (($scope$value = this.matchproperty_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.property, name: $scope$name, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchproperty_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<property_$0> {
        return this.run<property_$0>($$dpth,
            () => {
                let $scope$value: Nullable<mexpression>;
                let $$res: Nullable<property_$0> = null;
                if (true
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchmexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.property_$0, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchsend($$dpth: number, $$cr?: ErrorTracker): Nullable<send> {
        return this.run<send>($$dpth,
            () => {
                let $scope$delay: Nullable<Nullable<send_$0>>;
                let $scope$message: Nullable<mexpression>;
                let $scope$filter: Nullable<Nullable<send_$1>>;
                let $$res: Nullable<send> = null;
                if (true
                    && this.regexAccept(String.raw`(?:send)`, $$dpth + 1, $$cr) !== null
                    && (($scope$delay = this.matchsend_$0($$dpth + 1, $$cr)) || true)
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$message = this.matchmexpression($$dpth + 1, $$cr)) !== null
                    && (($scope$filter = this.matchsend_$1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.send, delay: $scope$delay, message: $scope$message, filter: $scope$filter};
                }
                return $$res;
            });
    }
    public matchsend_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<send_$0> {
        return this.run<send_$0>($$dpth,
            () => {
                let $scope$minutes: Nullable<numerical>;
                let $scope$seconds: Nullable<Nullable<send_$0_$0>>;
                let $$res: Nullable<send_$0> = null;
                if (true
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:delay)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$minutes = this.matchnumerical($$dpth + 1, $$cr)) !== null
                    && (($scope$seconds = this.matchsend_$0_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.send_$0, minutes: $scope$minutes, seconds: $scope$seconds};
                }
                return $$res;
            });
    }
    public matchsend_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<send_$0_$0> {
        return this.run<send_$0_$0>($$dpth,
            () => {
                let $scope$seconds: Nullable<numerical>;
                let $$res: Nullable<send_$0_$0> = null;
                if (true
                    && this.matchsend_$0_$0_$0($$dpth + 1, $$cr) !== null
                    && ($scope$seconds = this.matchnumerical($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.send_$0_$0, seconds: $scope$seconds};
                }
                return $$res;
            });
    }
    public matchsend_$0_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<send_$0_$0_$0> {
        return this.choice<send_$0_$0_$0>([
            () => this.matchsend_$0_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchsend_$0_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsend_$0_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<send_$0_$0_$0_1> {
        return this.matchSPACE($$dpth + 1, $$cr);
    }
    public matchsend_$0_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<send_$0_$0_$0_2> {
        return this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr);
    }
    public matchsend_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<send_$1> {
        return this.run<send_$1>($$dpth,
            () => {
                let $scope$filter: Nullable<filter>;
                let $$res: Nullable<send_$1> = null;
                if (true
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:to)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$filter = this.matchfilter($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.send_$1, filter: $scope$filter};
                }
                return $$res;
            });
    }
    public matchcycle($$dpth: number, $$cr?: ErrorTracker): Nullable<cycle> {
        return this.run<cycle>($$dpth,
            () => {
                let $scope$condition: Nullable<cycle_$0>;
                let $scope$send: Nullable<send>;
                let $$res: Nullable<cycle> = null;
                if (true
                    && ($scope$condition = this.matchcycle_$0($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$send = this.matchsend($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.cycle, condition: $scope$condition, send: $scope$send};
                }
                return $$res;
            });
    }
    public matchcycle_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<cycle_$0> {
        return this.choice<cycle_$0>([
            () => this.matchcycle_$0_1($$dpth + 1, $$cr),
            () => this.matchcycle_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcycle_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<cycle_$0_1> {
        return this.matchcycle_$0_$0($$dpth + 1, $$cr);
    }
    public matchcycle_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<cycle_$0_2> {
        return this.matchcycle_$0_$1($$dpth + 1, $$cr);
    }
    public matchcycle_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<cycle_$0_$0> {
        return this.run<cycle_$0_$0>($$dpth,
            () => {
                let $scope$filter: Nullable<filter>;
                let $$res: Nullable<cycle_$0_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:while)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$filter = this.matchfilter($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.cycle_$0_$0, filter: $scope$filter};
                }
                return $$res;
            });
    }
    public matchcycle_$0_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<cycle_$0_$1> {
        return this.run<cycle_$0_$1>($$dpth,
            () => {
                let $scope$times: Nullable<numerical>;
                let $$res: Nullable<cycle_$0_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:repeat)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$times = this.matchnumerical($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.cycle_$0_$1, times: $scope$times};
                }
                return $$res;
            });
    }
    public matchcycle_break($$dpth: number, $$cr?: ErrorTracker): Nullable<cycle_break> {
        return this.regexAccept(String.raw`(?:break)`, $$dpth + 1, $$cr);
    }
    public matchlisten($$dpth: number, $$cr?: ErrorTracker): Nullable<listen> {
        return this.run<listen>($$dpth,
            () => {
                let $scope$listen: Nullable<lexpression>;
                let $scope$do: Nullable<mexpression>;
                let $$res: Nullable<listen> = null;
                if (true
                    && this.regexAccept(String.raw`(?:listen)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$listen = this.matchlexpression($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:do)`, $$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$do = this.matchmexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.listen, listen: $scope$listen, do: $scope$do};
                }
                return $$res;
            });
    }
    public matchmexpression($$dpth: number, $$cr?: ErrorTracker): Nullable<mexpression> {
        const fn = () => {
            return this.choice<mexpression>([
                () => this.matchmexpression_1($$dpth + 1, $$cr),
                () => this.matchmexpression_2($$dpth + 1, $$cr),
                () => this.matchmexpression_3($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$mexpression$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$mexpression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<mexpression> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$mexpression$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchmexpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<mexpression_1> {
        return this.run<mexpression_1>($$dpth,
            () => {
                let $scope$message: Nullable<mexpression>;
                let $scope$op: Nullable<message_op>;
                let $$res: Nullable<mexpression_1> = null;
                if (true
                    && ($scope$message = this.matchmexpression($$dpth + 1, $$cr)) !== null
                    && ((this.matchSPACE($$dpth + 1, $$cr)) || true)
                    && ($scope$op = this.matchmessage_op($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.mexpression_1, message: $scope$message, op: $scope$op};
                }
                return $$res;
            });
    }
    public matchmexpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<mexpression_2> {
        return this.run<mexpression_2>($$dpth,
            () => {
                let $scope$message: Nullable<mexpression>;
                let $$res: Nullable<mexpression_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ((this.matchSPACE($$dpth + 1, $$cr)) || true)
                    && ($scope$message = this.matchmexpression($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.mexpression_2, message: $scope$message};
                }
                return $$res;
            });
    }
    public matchmexpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<mexpression_3> {
        return this.matchmessage($$dpth + 1, $$cr);
    }
    public matchlexpression($$dpth: number, $$cr?: ErrorTracker): Nullable<lexpression> {
        const fn = () => {
            return this.choice<lexpression>([
                () => this.matchlexpression_1($$dpth + 1, $$cr),
                () => this.matchlexpression_2($$dpth + 1, $$cr),
                () => this.matchlexpression_3($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$lexpression$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$lexpression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<lexpression> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$lexpression$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchlexpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<lexpression_1> {
        return this.run<lexpression_1>($$dpth,
            () => {
                let $scope$message: Nullable<lexpression>;
                let $scope$op: Nullable<listen_op>;
                let $$res: Nullable<lexpression_1> = null;
                if (true
                    && ($scope$message = this.matchlexpression($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$op = this.matchlisten_op($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.lexpression_1, message: $scope$message, op: $scope$op};
                }
                return $$res;
            });
    }
    public matchlexpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<lexpression_2> {
        return this.run<lexpression_2>($$dpth,
            () => {
                let $scope$message: Nullable<lexpression>;
                let $$res: Nullable<lexpression_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ((this.matchSPACE($$dpth + 1, $$cr)) || true)
                    && ($scope$message = this.matchlexpression($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.lexpression_2, message: $scope$message};
                }
                return $$res;
            });
    }
    public matchlexpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<lexpression_3> {
        return this.matchmessage($$dpth + 1, $$cr);
    }
    public matchmessage_op($$dpth: number, $$cr?: ErrorTracker): Nullable<message_op> {
        return this.run<message_op>($$dpth,
            () => {
                let $scope$message: Nullable<mexpression>;
                let $$res: Nullable<message_op> = null;
                if (true
                    && this.matchSEPARATOR($$dpth + 1, $$cr) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$message = this.matchmexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.message_op, message: $scope$message};
                }
                return $$res;
            });
    }
    public matchlisten_op($$dpth: number, $$cr?: ErrorTracker): Nullable<listen_op> {
        return this.run<listen_op>($$dpth,
            () => {
                let $scope$op: Nullable<listen_op_$0>;
                let $scope$message: Nullable<lexpression>;
                let $$res: Nullable<listen_op> = null;
                if (true
                    && ($scope$op = this.matchlisten_op_$0($$dpth + 1, $$cr)) !== null
                    && this.matchSPACE($$dpth + 1, $$cr) !== null
                    && ($scope$message = this.matchlexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.listen_op, op: $scope$op, message: $scope$message};
                }
                return $$res;
            });
    }
    public matchlisten_op_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<listen_op_$0> {
        return this.choice<listen_op_$0>([
            () => this.matchlisten_op_$0_1($$dpth + 1, $$cr),
            () => this.matchlisten_op_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlisten_op_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<listen_op_$0_1> {
        return this.regexAccept(String.raw`(?:or)`, $$dpth + 1, $$cr);
    }
    public matchlisten_op_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<listen_op_$0_2> {
        return this.regexAccept(String.raw`(?:and)`, $$dpth + 1, $$cr);
    }
    public matchmessage($$dpth: number, $$cr?: ErrorTracker): Nullable<message> {
        return this.choice<message>([
            () => this.matchmessage_1($$dpth + 1, $$cr),
            () => this.matchmessage_2($$dpth + 1, $$cr),
            () => this.matchmessage_3($$dpth + 1, $$cr),
            () => this.matchmessage_4($$dpth + 1, $$cr),
            () => this.matchmessage_5($$dpth + 1, $$cr),
            () => this.matchmessage_6($$dpth + 1, $$cr),
            () => this.matchmessage_7($$dpth + 1, $$cr),
            () => this.matchmessage_8($$dpth + 1, $$cr),
            () => this.matchmessage_9($$dpth + 1, $$cr),
            () => this.matchmessage_10($$dpth + 1, $$cr),
            () => this.matchmessage_11($$dpth + 1, $$cr),
            () => this.matchmessage_12($$dpth + 1, $$cr),
            () => this.matchmessage_13($$dpth + 1, $$cr),
            () => this.matchmessage_14($$dpth + 1, $$cr),
            () => this.matchmessage_15($$dpth + 1, $$cr),
            () => this.matchmessage_16($$dpth + 1, $$cr),
            () => this.matchmessage_17($$dpth + 1, $$cr),
            () => this.matchmessage_18($$dpth + 1, $$cr),
            () => this.matchmessage_19($$dpth + 1, $$cr),
            () => this.matchmessage_20($$dpth + 1, $$cr),
            () => this.matchmessage_21($$dpth + 1, $$cr),
            () => this.matchmessage_22($$dpth + 1, $$cr),
        ]);
    }
    public matchmessage_1($$dpth: number, $$cr?: ErrorTracker): Nullable<message_1> {
        return this.matchnumerical($$dpth + 1, $$cr);
    }
    public matchmessage_2($$dpth: number, $$cr?: ErrorTracker): Nullable<message_2> {
        return this.matchtext($$dpth + 1, $$cr);
    }
    public matchmessage_3($$dpth: number, $$cr?: ErrorTracker): Nullable<message_3> {
        return this.matchtime($$dpth + 1, $$cr);
    }
    public matchmessage_4($$dpth: number, $$cr?: ErrorTracker): Nullable<message_4> {
        return this.matchstate($$dpth + 1, $$cr);
    }
    public matchmessage_5($$dpth: number, $$cr?: ErrorTracker): Nullable<message_5> {
        return this.matchflow($$dpth + 1, $$cr);
    }
    public matchmessage_6($$dpth: number, $$cr?: ErrorTracker): Nullable<message_6> {
        return this.matchmedia($$dpth + 1, $$cr);
    }
    public matchmessage_7($$dpth: number, $$cr?: ErrorTracker): Nullable<message_7> {
        return this.matchfolder($$dpth + 1, $$cr);
    }
    public matchmessage_8($$dpth: number, $$cr?: ErrorTracker): Nullable<message_8> {
        return this.matchtime($$dpth + 1, $$cr);
    }
    public matchmessage_9($$dpth: number, $$cr?: ErrorTracker): Nullable<message_9> {
        return this.matchposition($$dpth + 1, $$cr);
    }
    public matchmessage_10($$dpth: number, $$cr?: ErrorTracker): Nullable<message_10> {
        return this.matchrotation($$dpth + 1, $$cr);
    }
    public matchmessage_11($$dpth: number, $$cr?: ErrorTracker): Nullable<message_11> {
        return this.matchscale($$dpth + 1, $$cr);
    }
    public matchmessage_12($$dpth: number, $$cr?: ErrorTracker): Nullable<message_12> {
        return this.matchchannel($$dpth + 1, $$cr);
    }
    public matchmessage_13($$dpth: number, $$cr?: ErrorTracker): Nullable<message_13> {
        return this.matchplane($$dpth + 1, $$cr);
    }
    public matchmessage_14($$dpth: number, $$cr?: ErrorTracker): Nullable<message_14> {
        return this.matchfilter($$dpth + 1, $$cr);
    }
    public matchmessage_15($$dpth: number, $$cr?: ErrorTracker): Nullable<message_15> {
        return this.matchfex($$dpth + 1, $$cr);
    }
    public matchmessage_16($$dpth: number, $$cr?: ErrorTracker): Nullable<message_16> {
        return this.matchfexpression($$dpth + 1, $$cr);
    }
    public matchmessage_17($$dpth: number, $$cr?: ErrorTracker): Nullable<message_17> {
        return this.matchartifact($$dpth + 1, $$cr);
    }
    public matchmessage_18($$dpth: number, $$cr?: ErrorTracker): Nullable<message_18> {
        return this.matchproperty($$dpth + 1, $$cr);
    }
    public matchmessage_19($$dpth: number, $$cr?: ErrorTracker): Nullable<message_19> {
        return this.matchsend($$dpth + 1, $$cr);
    }
    public matchmessage_20($$dpth: number, $$cr?: ErrorTracker): Nullable<message_20> {
        return this.matchcycle($$dpth + 1, $$cr);
    }
    public matchmessage_21($$dpth: number, $$cr?: ErrorTracker): Nullable<message_21> {
        return this.matchcycle_break($$dpth + 1, $$cr);
    }
    public matchmessage_22($$dpth: number, $$cr?: ErrorTracker): Nullable<message_22> {
        return this.matchlisten($$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchprogram(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchprogram(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchprogram(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<program>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}